#Properties file for com.leonardocompany.leocheck.checkers
checker.name.CtorDtorChecker = Constructor/Destructor checker
problem.name.ThrowInDestructorProblem = Throw exception in destructor
problem.messagePattern.ThrowInDestructorProblem = Throw exception in destructor
problem.description.ThrowInDestructorProblem = This rule will flag 'throw' expressions in destructors
problem.name.GlobalsInCtorProblem = Global variables in constructor
problem.messagePattern.GlobalsInCtorProblem = Global variable ''{0}'' used in constructor
problem.description.GlobalsInCtorProblem = This rule will flag global variables used in constructors
problem.name.CallSuperCtorProblem = Call base constructors
problem.messagePattern.CallSuperCtorProblem = Miss the call of at least one base constructor
problem.description.CallSuperCtorProblem = This rule will flag constructors without explicit call to base constructors

checker.name.VariablesChecker = Variable checker
problem.name.MissedInitializationProblem = Variable without initialization
problem.messagePattern.MissedInitializationProblem = Variable ''{0}'' not initialized
problem.description.MissedInitializationProblem = This rule will flag variables without an initialization value
problem.name.StaticMissedInitializationProblem = Static variable without initialization 
problem.messagePattern.StaticMissedInitializationProblem = Static variable ''{0}'' not initialized
problem.description.StaticMissedInitializationProblem = This rule will flag static variables members of a class defined in translation unit without initialization
problem.name.AvoidGlobalVarsProblem = Avoid global variables 
problem.messagePattern.AvoidGlobalVarsProblem = Variable ''{0}'' defined global
problem.description.AvoidGlobalVarsProblem = This rule will flag all global variables defined in global or namespace scope

checker.name.ReturnChecker = Return checker
problem.description.RetPrivateField = Returning no const address or reference to no-public class fields from public method
problem.messagePattern.RetPrivateField = Returning the no-public field ''{0}'' without const
problem.name.RetPrivateField = Encapsulation violation
problem.description.NoRetThisOpAssign = The assignment operator must always return 'this'
problem.messagePattern.NoRetThisOpAssign = Assignment operator does not return 'this' 
problem.name.NoRetThisOpAssign = Operator assign no return this
problem.description.RetFieldFromConstMethod = Returning no const address or reference from const method
problem.messagePattern.RetFieldFromConstMethod = Returning field ''{0}'' without const
problem.name.RetFieldFromConstMethod = Returning no const from const method

checker.name.ClassMembersConst = Class member functions should be constant and static if possible
problem.name.MemberCannotBeUsedInStatic = Class members cannot be used in static methods
problem.messagePattern.MemberCannotBeUsedInStatic = Class member ''{0}'' cannot be used in static method ''{1}''
problem.description.MemberCannotBeUsedInStatic = Class members cannot be used in static methods
problem.name.MethodShouldBeStatic = Method should be static
problem.messagePattern.MethodShouldBeStatic = Method ''{0}'' should be static
problem.description.MethodShouldBeStatic = Method doesn't use any class member so it should be declared as static
problem.name.MemberCannotBeWritten = Class members cannot be written in constant methods
problem.messagePattern.MemberCannotBeWritten = Class member ''{0}'' cannot be written in constant method ''{1}''
problem.description.MemberCannotBeWritten = Class members cannot be written in constant methods
problem.name.MethodShouldBeConst = Method should be constant
problem.messagePattern.MethodShouldBeConst = Method ''{0}'' should be constant
problem.description.MethodShouldBeConst = Method doesn't write any class member or call nonconstant function so it should be declared as constant

checker.name.AllocationChecker = Allocation checker
problem.description.DeleteThisProblem = This rule will flag expressions with 'delete this' to delete an object
problem.messagePattern.DeleteThisProblem = Object deletion using 'this' pointer
problem.name.DeleteThisProblem = Deletion using 'this' pointer
problem.description.PointerResetProblem = This rule will flag expressions where 'delete' is used but pointer is not reset to zero
problem.messagePattern.PointerResetProblem = Pointer ''{0}'' is not reset to zero after deletion
problem.name.PointerResetProblem = Pointer reset after deletion
problem.description.DynamicArrayProblem = Use 'Array' or 'Vector' classes instead of allocating an array directly
problem.messagePattern.DynamicArrayProblem = Dynamic array allocation
problem.name.DynamicArrayProblem = Dynamic allocation of array
problem.description.DeleteVoidProblem = Deleting memory using a void pointer is undefined behavior
problem.messagePattern.DeleteVoidProblem = Delete using void pointers ''{0}''
problem.name.DeleteVoidProblem = Delete using void pointers

checker.name.NamingConventionClassesChecker = Naming convention checker
problem.description.ClassNameProblem = This rule will flag classes with a name not compliant with a defined pattern
problem.messagePattern.ClassNameProblem = Bad class name ''{0}'' (pattern /{1}/)
problem.name.ClassNameProblem = Naming convention for classes
problem.description.LabelPositionProblem = This rule will flag visibility labels defined in a sequence different from private, protected, public
problem.messagePattern.LabelPositionProblem = Label defined out of sequence
problem.name.LabelPositionProblem = Order convention for visibility labels
problem.description.FieldsVisibilityProblem = This rule will flag classes with fields with a visibility different from private
problem.messagePattern.FieldsVisibilityProblem = Class ''{0}'' has no-private fields
problem.name.FieldsVisibilityProblem = Class fields visibility

checker.name.TryCatchStatementChecker = Try catch statement checker
problem.description.CatchAllProblem = This rule will flag 'catch all' handlers if they are used without any other specialized catch handler
problem.messagePattern.CatchAllProblem = Avoid using 'catch all'
problem.name.CatchAllProblem = Avoid using 'catch all'
problem.description.CatchAllOrderProblem = This rule will flag 'catch all' handlers defined before another catch handler in a try-catch block
problem.messagePattern.CatchAllOrderProblem = 'catch all' must be the latest handler in a try-catch block
problem.name.CatchAllOrderProblem = 'catch all' position
problem.description.CatchEmptyProblem = This rule will flag empty 'catch' handlers
problem.messagePattern.CatchEmptyProblem = Empty 'catch' is not allowed
problem.name.CatchEmptyProblem = Avoid empty 'catch'
problem.description.EmptyThrowProblem = This rule will flag empty 'throw' statement used outside a catch handler
problem.messagePattern.EmptyThrowProblem = Empty 'throw' is not allowed outside any catch handler
problem.name.EmptyThrowProblem = Empty 'throw'
problem.description.CatchNoStdProblem = This rule will flag 'catch' statements catching something different from std::exception or any child class
problem.messagePattern.CatchNoStdProblem = Using a common base class for all exceptions help to avoid to miss 'catch' statements for unexpected exceptions
problem.name.CatchNoStdProblem = Not catching std::exception

checker.name.SizeofChecker = Sizeof checker
problem.description.SizeofArrayProblem = This rule will flag sizeof operator applied to arrays used as function parameters
problem.messagePattern.SizeofArrayProblem = Sizeof applied to function parameter ''{0}'' 
problem.name.SizeofArrayProblem = Sizeof applied to arrays
problem.description.SizeofNestedProblem = This rule will flag nested sizeof operators
problem.messagePattern.SizeofNestedProblem = Nested sizeof operators 
problem.name.SizeofNestedProblem = Nested sizeof operators
problem.description.SizeofVoidProblem = This rule will flag sizeof operator applied to void types
problem.messagePattern.SizeofVoidProblem = Sizeof applied to void type 
problem.name.SizeofVoidProblem = Sizeof applied to void type
problem.description.SizeofNoParenProblem = This rule will flag sizeof operator applied without the use of parenthesis
problem.messagePattern.SizeofNoParenProblem = Sizeof without parenthesis 
problem.name.SizeofNoParenProblem = Sizeof without parenthesis

checker.name.TrigraphsChecker = Trigraphs checker
problem.description.TrigraphsProblem = This rule will flag the use of trigraphs (??=, ??/, ??^, ??(, ??), ??!, ??<, ??>, ??-)
problem.messagePattern.TrigraphsProblem = Trigraphs ''{0}'' used
problem.name.TrigraphsProblem = Avoid trigraphs

checker.name.LambdaExpressionChecker = Lambda expression checker
problem.description.LambdaCaptureProblem = This rule will flag the use default capture for a lambda expression
problem.messagePattern.LambdaCaptureProblem = Default capture used for lambda expression
problem.name.LambdaCaptureProblem = Avoid lambda default capture

checker.name.NamespaceChecker = Namespace checker
problem.description.StdNamespaceProblem = It is undefined behavior to add declarations or definitions to namespace std or to any namespace nested within std
problem.messagePattern.StdNamespaceProblem = Do not add anything with exception of template specialization to standard namespace
problem.name.StdNamespaceProblem = Hook to std namespace
problem.description.NamespaceNameProblem = This rule will flag namespaces with a name not compliant with a defined pattern
problem.messagePattern.NamespaceNameProblem = Bad namespace name ''{0}'' (pattern /{1}/)
problem.name.NamespaceNameProblem = Naming convention for namespaces

checker.name.ForLoopChecker = For loop checker
problem.description.FloatCounterProblem = This rule will flag for loops with float counters
problem.messagePattern.FloatCounterProblem = For loop uses a float counter 
problem.name.FloatCounterProblem = Float counter in for loop
problem.description.CounterModificationProblem = This rule will flag modification of 'for' loops counters inside loops
problem.messagePattern.CounterModificationProblem = Loop counter ''{0}'' modified
problem.name.CounterModificationProblem = For loop invariant

checker.name.AutoPtrChecker = Auto pointer checker
problem.description.AutoPtrProblem = This rule will flag the use of old auto_ptr class
problem.messagePattern.AutoPtrProblem = Auto pointer is deprecated, replace with unique_ptr 
problem.name.AutoPtrProblem = Usage of auto pointer

checker.name.MemCompareChecker = Mem compare checker
problem.name.CompareCompositeTypesProblem = Memory compare with composite types
problem.messagePattern.CompareCompositeTypesProblem = Comparing composite type with possible padding
problem.description.CompareCompositeTypesProblem = This rule will flag the use of memcmp function over structures or classes. Due to padding, compare is not reliable.

checker.name.StringChecker = String checker
problem.name.CstrProblem = Wrong use of c_str
problem.messagePattern.CstrProblem = Use of c_str on temporary instance
problem.description.CstrProblem = This rule will flag calls to c_str string method on temporaries

checker.name.BraceChecker = Miss brace checker
problem.name.MissBraceProblem = Miss brace in control statements
problem.messagePattern.MissBraceProblem = Miss brace
problem.description.MissBraceProblem = This rule will flag 'if/for/while/do-while' statements without an opening brace

checker.name.MemberClassesChecker = Member classes checker
problem.name.CtorDtorInlineProblem = Construtor/Destructor inline
problem.messagePattern.CtorDtorInlineProblem = Class ''{0}'' defines constructor/destructor inline
problem.description.CtorDtorInlineProblem = This rule will flag classes with constructors/destructors declared inline
problem.name.VirtualInlineProblem = Virtual methods inline
problem.messagePattern.VirtualInlineProblem = Virtual method ''{0}'' inline
problem.description.VirtualInlineProblem = This rule will flag classes with virtual methods defined inline
problem.name.ImplicitVirtualProblem = Implicit virtual method
problem.messagePattern.ImplicitVirtualProblem = Virtual method ''{0}'' without virtual keyword
problem.description.ImplicitVirtualProblem = This rule will flag classes with virtual methods defined without 'virtual' keyword
problem.name.AvoidOverloadsProblem = Avoid overload '&&' '||' ','
problem.messagePattern.AvoidOverloadsProblem = Not allowed overload ''{0}''
problem.description.AvoidOverloadsProblem = Overloading '&&', '||' or ',' changes the order of evaluation with the boolean logic operators, it changes because the usual short-circuiting behavior is gone since the second argument has to be evaluated to pass it as an argument
problem.name.UserCtorProblem = Always define constructors
problem.messagePattern.UserCtorProblem = Class ''{0}'' does not define at least one constructor
problem.description.UserCtorProblem = For readability and maintenance it is better to define always at least one constructor
problem.name.AbstractNoCopyProblem = Abstract classes non-copyable
problem.messagePattern.AbstractNoCopyProblem = Abstract class ''{0}'' is copyable 
problem.description.AbstractNoCopyProblem = This rule will flag classes with public copy constructor and/or assignment operator
problem.name.AvoidMultipleInheritanceProblem = Avoid multiple inheritance
problem.messagePattern.AvoidMultipleInheritanceProblem = Class ''{0}'' uses multiple inheritance 
problem.description.AvoidMultipleInheritanceProblem = This rule will flag classes multiple inheritance
problem.name.CopyCtorOnlyProblem = Only copy constructor defined
problem.messagePattern.CopyCtorOnlyProblem = Class ''{0}'' defines copy constructor but no destructor/assignment operator
problem.description.CopyCtorOnlyProblem = This rule will flag classes with copy constructor and the default destructor or assignment operator
problem.name.AssignOpOnlyProblem = Only assignment operator defined
problem.messagePattern.AssignOpOnlyProblem = Class ''{0}'' defines assignment operator but no destructor/copy constructor
problem.description.AssignOpOnlyProblem = This rule will flag classes with assignment operator and the default destructor or copy constructor
problem.name.VirtualNoOverrideProblem = Virtual method without 'override'
problem.messagePattern.VirtualNoOverrideProblem = Virtual method ''{0}'' without 'override' keyword
problem.description.VirtualNoOverrideProblem = This rule will flag classes with virtual methods defined without 'override' keyword
problem.name.AvoidProtectedFieldsProblem = Avoid protected fields
problem.messagePattern.AvoidProtectedFieldsProblem = Class ''{0}'' has protected fields
problem.description.AvoidProtectedFieldsProblem = This rule will flag classes with protected fields, use private fields and protected methods 
problem.name.MoveOpNoexceptProblem = Move operations no 'noexcept'
problem.messagePattern.MoveOpNoexceptProblem = Class ''{0}'' has move operations not 'noexcept'
problem.description.MoveOpNoexceptProblem = This rule will flag classes with move constructor and/or move assignment which can trigger exceptions 

checker.name.StructsChecker = Structs checker
problem.name.AvoidStructsProblem = Avoid structures
problem.messagePattern.AvoidStructsProblem = Structure ''{0}'' used
problem.description.AvoidStructsProblem = This rule will flag the use of structures. Structures have only public members, replace with classes 
problem.name.AvoidUnionsProblem = Avoid unions
problem.messagePattern.AvoidUnionsProblem = Union ''{0}'' used
problem.description.AvoidUnionsProblem = This rule will flag the use of unions 
problem.name.AvoidVirtualBasesProblem = Avoid virtual base classes
problem.messagePattern.AvoidVirtualBasesProblem = Virtual base ''{0}'' used
problem.description.AvoidVirtualBasesProblem = The use of virtual base classes can introduce a number of undefined and potentially confusing behaviors

checker.name.StructsChecker = Function checker
problem.name.ParByCopyProblem = Avoid to define functions with parameters passed by value
problem.messagePattern.ParByCopyProblem = Parameter ''{0}'' passed by value
problem.description.ParByCopyProblem = Avoid to define functions with parameters passed by value unless they are basic types 

checker.name.FieldsClassesChecker = Fields classes checker
problem.name.HidingFieldProblem = Avoid hiding fields
problem.messagePattern.HidingFieldProblem = Field ''{0}'' with same name in base class ''{1}''
problem.description.HidingFieldProblem = Avoid to define fields with the same name between base and child classes
problem.name.FieldsNoCtorProblem = Fields without constructor
problem.messagePattern.FieldsNoCtorProblem = Class ''{0}'' has fields but no constructor
problem.description.FieldsNoCtorProblem = This rule will flag all classes with no static fields but without constructor

checker.name.ClassFieldsCopiedChecker = Class fields copied checker
problem.name.ClassFieldsCopiedProblem = Use all fields in assignment operator
problem.messagePattern.ClassFieldsCopiedProblem = Miss field ''{0}'' in assignment operator 
problem.description.ClassFieldsCopiedProblem = When an assignment operator is defined by the user all class fields must be copied/moved

checker.name.ExplicitChecker = Explicit checker
problem.name.UseExplicitProblem = Use explicit where possible
problem.messagePattern.UseExplicitProblem = Declaration miss 'explicit'
problem.description.UseExplicitProblem = Implicit conversions are hard to understand and they can have unexpected results. This rule will flag constructors with a single argument without 'explicit' keyword 

checker.name.ValueConventionLiteralsChecker = Value convention for literals
problem.name.ValueConventionLiteralsProblem = Use always uppercase letters for literals
problem.messagePattern.ValueConventionLiteralsProblem = Lowercase letters used for value ''{0}'' 
problem.description.ValueConventionLiteralsProblem = This rule will flag lowercase letters used in numeric literals  

checker.name.ContinueChecker = Continue checker
problem.name.ContinueProblem = Avoid use of 'continue'
problem.messagePattern.ContinueProblem = Avoid 'continue' keyword 
problem.description.ContinueProblem = This rule will flag the use of 'continue' keyword, use 'if' instead

checker.name.MoreThanOneBreakGotoInLoopChecker = Break loops checker
problem.description.MoreThanOneBreakGotoInLoopProblem = Loops should not have more than one 'break' or 'goto' statement
problem.messagePattern.MoreThanOneBreakGotoInLoopProblem = More than one 'break' or 'goto' used in loop
problem.name.MoreThanOneBreakGotoInLoopProblem = No more than one 'break' or 'goto' statement in loops
problem.name.BreakProblem = Avoid use of 'break' in loops
problem.messagePattern.BreakProblem = 'break' keyword in loop used 
problem.description.BreakProblem = This rule will flag the use of 'break' keyword in loops

checker.name.ConstCastChecker = Const cast checker
problem.name.ConstCastProblem = Avoid const cast to remove 'const' and 'volatile' 
problem.messagePattern.ConstCastProblem = Removing 'const' or 'volatile' using const cast
problem.description.ConstCastProblem = Removing const or voltatile using const can have undefined behavior

checker.name.ExceptionChecker = Exception checker
problem.name.ExceptionProblem = Avoid 'throw' exception specification  
problem.messagePattern.ExceptionProblem = Exception specification with 'throw' used for function ''{0}''
problem.description.ExceptionProblem = 'throw' exception specification is deprecated. Use 'noexcept' instead. 

checker.name.IncludeBlacklistChecker = Include blacklist checker
problem.name.IncludeBlacklistProblem = Avoid to include specific header files  
problem.messagePattern.IncludeBlacklistProblem = Header file ''{0}'' included
problem.description.IncludeBlacklistProblem = Avoid to include specific header files

checker.name.IfElseIfChecker = If-else-if checker
problem.name.IfElseIfProblem = If-else-if without final else  
problem.messagePattern.IfElseIfProblem = Missing else clause
problem.description.IfElseIfProblem = This rule will flag if-else-if statements without a final else clause

checker.name.IdentifierChecker = Identifier checker
problem.name.IdentifierProblem = Identifiers with long names
problem.messagePattern.IdentifierProblem = Identifier ''{0}'' is longer than 31 characters
problem.description.IdentifierProblem = This rule will flag identifiers longer than 31 characters

checker.name.NullStatementsChecker = Null statements checker
problem.name.NullStatementsProblem = Empty statement
problem.messagePattern.NullStatementsProblem = Empty statement used
problem.description.NullStatementsProblem = This rule will flag all empty statements, i.e. ';' only

checker.name.EnumsChecker = Enum checker
problem.name.EnumInitProblem = Enum members not initialized 
problem.messagePattern.EnumInitProblem = Enum ''{0}'' hasn't got all members initialized
problem.description.EnumInitProblem = Enum members other than the first one should not be explicitly initialized unless all members are explicitly initialized

checker.name.PostOperatorChecker = Post operator checker
problem.name.PostOperatorProblem = Post increment/decrement operator used
problem.messagePattern.PostOperatorProblem = Post increment/decrement operator used
problem.description.PostOperatorProblem = Post increment or decrement operations have performance impact. Replace with pre increment and decrement where possible.

checker.name.CtorTemplateChecker = Template constructor checker
problem.name.CtorTemplateProblem = Template constructor with universal reference
problem.messagePattern.CtorTemplateProblem = Template constructor with universal reference without template constraint
problem.description.CtorTemplateProblem = Template constructor with a single universal reference can have higher priority than move and copy constructor, a concept or enable_if is needed in this case.
